import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import time

class OpenLoopController(Node):
    def __init__(self):
        super().__init__('tb_openLoop')
        self.publisher = self.create_publisher(Twist, '/cmd_vel', 10)
        self.timer = self.create_timer(0.1, self.control_loop)
        self.start_time = self.get_clock().now()
        self.phase = 'accelerating'

    def control_loop(self):
        elapsed_time = (self.get_clock().now() - self.start_time).nanoseconds / 1e9
        msg = Twist()

        if self.phase == 'accelerating':
            if elapsed_time < 2:
                msg.linear.x = 0.05 * elapsed_time
            else:
                self.phase = 'constant_velocity'
                self.start_time = self.get_clock().now()

        elif self.phase == 'constant_velocity':
            if elapsed_time < 5:
                msg.linear.x = 0.1
            else:
                self.phase = 'decelerating'
                self.start_time = self.get_clock().now()

        elif self.phase == 'decelerating':
            if elapsed_time < 2:
                msg.linear.x = 0.1 - 0.05 * elapsed_time
            else:
                msg.linear.x = 0.0

        self.publisher.publish(msg)

def main(args=None):
    rclpy.init(args=args)
    node = OpenLoopController()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
